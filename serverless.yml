service: familyservice

provider:
  name: aws
  runtime: nodejs12.x
  profile: ${opt:profile, ''}
  region: us-east-2
  memorySize: 128
  logRetentionInDays: 3
  stage: ${opt:stage, 'dev'}
  apiGateway: 
    minimumCompressionSize: 1024
  apiKeys: 
    - FamilyCarousel-FamilyService-${self:provider.stage}
  usagePlan:
    quota:
      limit: 10000
      period: DAY
    throttle:
      burstLimit: 1000
      rateLimit: 1000
  environment:
    NODE_ENV: ${self:provider.stage}
    FAMILY_TABLE: ${self:custom.familyTableNameMap.${self:provider.stage}}
    MEMBER_TABLE: ${self:custom.memberTableNameMap.${self:provider.stage}}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "logs: *"
      Resource: "*"
    - Effect: "Allow"
      Action:   
        - "dynamodb:*"
      Resource: 
        - { "Fn::GetAtt": ["MEMBERTABLE", "Arn"] }
        - Fn::Join:
          - "/"
          - 
            - { "Fn::GetAtt": ["MEMBERTABLE", "Arn"] }
            - "index/*"
        - { "Fn::GetAtt": ["FAMILYTABLE", "Arn"] }
        - Fn::Join:
          - "/"
          - 
            - { "Fn::GetAtt": ["FAMILYTABLE", "Arn"] }
            - "index/*"
    - Effect: "Allow"
      Action:
      - "s3: *"
      Resource:
        - "arn:aws:s3:::${self:custom.FamilyPhotoBucketName}/*"

custom:
  shortName: FamilyCarousel
  serviceName: FamilyService
  createFamilyName: ${self:custom.shortName}-${self:custom.serviceName}-CreateFamily-${self:provider.stage}
  createMemberName: ${self:custom.shortName}-${self:custom.serviceName}-CreateMember-${self:provider.stage}
  getFamilyByIdName: ${self:custom.shortName}-${self:custom.serviceName}-GetFamilyById-${self:provider.stage}
  getMemberByIdName: ${self:custom.shortName}-${self:custom.serviceName}-GetMemberById-${self:provider.stage}
  listAllMembersForFamilyName: ${self:custom.shortName}-${self:custom.serviceName}-ListAllMembersForFamily-${self:provider.stage}
  listAllFamiliesForMemberName: ${self:custom.shortName}-${self:custom.serviceName}-ListAllFamiliesForMember-${self:provider.stage}
  updateFamilyName: ${self:custom.shortName}-${self:custom.serviceName}-UpdateFamily-${self:provider.stage}
  deleteFamilyName: ${self:custom.shortName}-${self:custom.serviceName}-DeleteFamily-${self:provider.stage}
  deleteMemberName: ${self:custom.shortName}-${self:custom.serviceName}-DeleteMember-${self:provider.stage}
  deleteMemberFromFamilyName: ${self:custom.shortName}-${self:custom.serviceName}-DeleteMemberFromFamily-${self:provider.stage}
  getFamilyPhotoName: ${self:custom.shortName}-${self:custom.serviceName}-GetFamilyPhoto-${self:provider.stage}
  FamilyPhotoBucketName: familycarousel-familyservice-photo-bucket-${self:provider.stage}
  serverless-offline:
    host: 0.0.0.0
  familyTableNameMap:
    dev: devFamilyTable
    prod: prodFamilyTable
  memberTableNameMap:
    dev: devMemberTable
    prod: prodMemberTable
  FamilyServiceDomainMap:
    dev: familyservice-dev.familycarousel.com
    prod: familyservice.familycarousel.com
  FamilyServiceCertMap:
    dev: '*.familycarousel.com'
    prod: '*.familycarousel.com'
  customDomain:
    domainName: ${self:custom.FamilyServiceDomainMap.${self:provider.stage}}
    certificateName: ${self:custom.FamilyServiceCertMap.${self:provider.stage}}
    createRoute53Record: true
    endpointType: 'regional'
  webpack:
    webpackConfig: ./webpack.config.js 
    includeModules: true

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-webpack

package: 
  individually: true

functions:
  createFamily:
    name: ${self:custom.createFamilyName}
    handler: handlers/Create.createFamily
    description: Lambda for Creating a family in the family service
    timeout: 30
    events:
      - http:
          path: /family
          method: post
          private: true
  createMember:
    name: ${self:custom.createMemberName}
    handler: handlers/Create.createMember
    description: Lambda for Creating a Member in the family service
    timeout: 30
    events:
      - http:
          path: /member
          method: post
          private: true
  getFamilyById:
    name: ${self:custom.getFamilyByIdName}
    handler: handlers/Read.getFamilyById
    description: Lambda for getting a family by its id
    timeout: 30
    events:
      - http:
          path: /family/{id}
          method: get
          private: true
  getMemberById:
    name: ${self:custom.getMemberByIdName}
    handler: handlers/Read.getMemberById
    description: Lambda for getting a member by its id
    timeout: 30
    events:
      - http:
          path: /member/{id}
          method: get
          private: true
  listAllMembersForFamily:
    name: ${self:custom.listAllMembersForFamilyName}
    handler: handlers/Read.listAllMembersForFamily
    description: Lambda for getting a member by its id
    timeout: 30
    events:
      - http:
          path: /family/{id}/member
          method: get
          private: true
  listAllFamiliesForMember:
    name: ${self:custom.listAllFamiliesForMemberName}
    handler: handlers/Read.listAllFamilysForMember
    description: Lambda for getting a member by its id
    timeout: 30
    events:
      - http:
          path: /member/{id}/family
          method: get
          private: true

  deleteFamily:
    name: ${self:custom.deleteFamilyName}
    handler: handlers/Delete.deleteFamily
    description: Lambda for deleting a family by its id
    timeout: 30
    events:
      - http:
          path: /family/{id}
          method: delete
          private: true
  deleteMember:
    name: ${self:custom.deleteMemberName}
    handler: handlers/Delete.deleteMember
    description: Lambda for deleting a member by its id
    timeout: 30
    events:
      - http:
          path: /member/{id}
          method: delete
          private: true
  deleteMemberFromFamily:
    name: ${self:custom.deleteMemberFromFamilyName}
    handler: handlers/Delete.deleteMemberFromFamily
    description: Lambda for deleting a member from a certain family
    timeout: 30
    events:
      - http:
          path: /member/{id}/family/{familyId}
          method: delete
          private: true
  # listFamiliesByMemberId:
  #   name: ${self:custom.listFamiliesByMemberIdName}
  #   handler: handlers/List.listFamilyByMemberId
  #   description: Lambda for listing all familys by memberId in the family service
  #   timeout: 30
  #   events:
  #     - http:
  #         path: /family
  #         method: get
  #         private: true
  # getFamily:
  #   name: ${self:custom.getFamilyByIdName}
  #   handler: handlers/List.getFamilyByFamilyId
  #   description: Lambda for getting a family by its id
  #   timeout: 30
  #   events:
  #     - http:
  #         path: /family/{familyId}
  #         method: get
  #         private: true
  # updateFamily:
  #   name: ${self:custom.updateFamilyName}
  #   handler: handlers/Update.updateFamily
  #   description: Lambda for updating a family
  #   timeout: 30
  #   events:
  #     - http:
  #         path: /family
  #         method: put
  #         private: true
  # deleteFamily:
  #   name: ${self:custom.deleteFamilyName}
  #   handler: handlers/Delete.deleteFamily
  #   description: Lambda for deleting a family
  #   timeout: 30
  #   events:
  #     - http:
  #         path: /family/{familyId}
  #         method: delete
  #         private: true
  # getFamilyPhoto:
  #   name: ${self:custom.getFamilyPhotoName}
  #   handler: handlers/GetPhoto.getPhotoByFamilyId
  #   description: Lambda for getting family photo
  #   timeout: 30
  #   events:
  #     - http:
  #         path: /family/{familyId}/photo
  #         method: get
  #         private: true

resources:
  Resources:
    FAMILYTABLE:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.familyTableNameMap.${self:provider.stage}}
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
          - AttributeName: FamilyCreator
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: FamilyCreator_IDX
            KeySchema:
              - AttributeName: FamilyCreator
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
    MEMBERTABLE:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.memberTableNameMap.${self:provider.stage}}
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
          - AttributeName: FamilyId
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
          - AttributeName: FamilyId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: FamilyId_IDX
            KeySchema:
              - AttributeName: FamilyId
                KeyType: HASH
              - AttributeName: Id
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
    FAMILYPHOTOBUCKET:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.FamilyPhotoBucketName}
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256