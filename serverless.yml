org: funkel1989
app: familyservice

service: familyservice

provider:
  name: aws
  runtime: nodejs12.x
  profile: ${opt:profile, ''}
  region: us-east-2
  memorySize: 128
  logRetentionInDays: 3
  logs:
    httpApi: true
  stage: ${opt:stage, 'dev'}
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://familycarousel.auth0.com/
        audience: ${self:custom.FamilyServiceDomainMap.${self:provider.stage}}
  environment:
    NODE_ENV: ${self:provider.stage}
    FAMILY_TABLE: ${self:custom.familyTableNameMap.${self:provider.stage}}
    MEMBER_TABLE: ${self:custom.memberTableNameMap.${self:provider.stage}}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'logs: *'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - 'dynamodb:*'
      Resource:
        - { 'Fn::GetAtt': ['MEMBERTABLE', 'Arn'] }
        - Fn::Join:
            - '/'
            - - { 'Fn::GetAtt': ['MEMBERTABLE', 'Arn'] }
              - 'index/*'
        - { 'Fn::GetAtt': ['FAMILYTABLE', 'Arn'] }
        - Fn::Join:
            - '/'
            - - { 'Fn::GetAtt': ['FAMILYTABLE', 'Arn'] }
              - 'index/*'
    - Effect: 'Allow'
      Action:
        - 's3: *'
      Resource:
        - 'arn:aws:s3:::${self:custom.FamilyPhotoBucketName}/*'

custom:
  shortName: FamilyCarousel
  serviceName: FamilyService
  createFamilyName: ${self:custom.shortName}-${self:custom.serviceName}-CreateFamily-${self:provider.stage}
  createMemberName: ${self:custom.shortName}-${self:custom.serviceName}-CreateMember-${self:provider.stage}
  getFamilyByIdName: ${self:custom.shortName}-${self:custom.serviceName}-GetFamilyById-${self:provider.stage}
  getMemberByIdName: ${self:custom.shortName}-${self:custom.serviceName}-GetMemberById-${self:provider.stage}
  listAllMembersForFamilyName: ${self:custom.shortName}-${self:custom.serviceName}-ListAllMembersForFamily-${self:provider.stage}
  listAllFamiliesForMemberName: ${self:custom.shortName}-${self:custom.serviceName}-ListAllFamiliesForMember-${self:provider.stage}
  updateFamilyName: ${self:custom.shortName}-${self:custom.serviceName}-UpdateFamily-${self:provider.stage}
  updateMemberInFamilyName: ${self:custom.shortName}-${self:custom.serviceName}-UpdateMemberInFamily-${self:provider.stage}
  updateMemberGloballyName: ${self:custom.shortName}-${self:custom.serviceName}-UpdateMemberGlobally-${self:provider.stage}
  deleteFamilyName: ${self:custom.shortName}-${self:custom.serviceName}-DeleteFamily-${self:provider.stage}
  deleteMemberName: ${self:custom.shortName}-${self:custom.serviceName}-DeleteMember-${self:provider.stage}
  deleteMemberFromFamilyName: ${self:custom.shortName}-${self:custom.serviceName}-DeleteMemberFromFamily-${self:provider.stage}
  # getFamilyPhotoName: ${self:custom.shortName}-${self:custom.serviceName}-GetFamilyPhoto-${self:provider.stage}
  FamilyPhotoBucketName: familycarousel-familyservice-photo-bucket-${self:provider.stage}
  serverless-offline:
    host: 0.0.0.0
  familyTableNameMap:
    dev: testFamilyTable
    prod: prodFamilyTable
  memberTableNameMap:
    dev: testMemberTable
    prod: prodMemberTable
  FamilyServiceDomainMap:
    test: familyservice-test.familycarousel.com
    prod: familyservice.familycarousel.com
  FamilyServiceCertMap:
    dev: '*.familycarousel.com'
    prod: '*.familycarousel.com'
  customDomain:
    domainName: ${self:custom.FamilyServiceDomainMap.${self:provider.stage}}
    certificateName: ${self:custom.FamilyServiceCertMap.${self:provider.stage}}
    createRoute53Record: true
    endpointType: 'regional'
    apiType: http
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'yarn'

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-webpack

package:
  individually: true
  excludeDevDependencies: true

functions:
  createFamily:
    name: ${self:custom.createFamilyName}
    handler: handlers/Create.createFamily
    description: Lambda for Creating a family in the family service
    events:
      - httpApi:
          path: /family
          method: POST
          authorizer: serviceAuthorizer
  createMember:
    name: ${self:custom.createMemberName}
    handler: handlers/Create.createMember
    description: Lambda for Creating a Member in the family service
    events:
      - httpApi:
          path: /member
          method: POST
          authorizer: serviceAuthorizer  
  getFamilyById:
    name: ${self:custom.getFamilyByIdName}
    handler: handlers/Read.getFamilyById
    description: Lambda for getting a family by its id
    events:
      - httpApi:
          path: /family/{id}
          method: GET
          authorizer: serviceAuthorizer
  getMemberById:
    name: ${self:custom.getMemberByIdName}
    handler: handlers/Read.getMemberById
    description: Lambda for getting a member by its id
    events:
      - httpApi:
          path: /member/{id}
          method: GET
          authorizer: serviceAuthorizer
  listAllMembersForFamily:
    name: ${self:custom.listAllMembersForFamilyName}
    handler: handlers/Read.listAllMembersForFamily
    description: Lambda for getting a member by its id
    events:
      - httpApi:
          path: /family/{id}/member
          method: GET
          authorizer: serviceAuthorizer
  listAllFamiliesForMember:
    name: ${self:custom.listAllFamiliesForMemberName}
    handler: handlers/Read.listAllFamilysForMember
    description: Lambda for getting a member by its id
    events:
      - httpApi:
          path: /member/{id}/family
          method: GET
          authorizer: serviceAuthorizer

  deleteFamily:
    name: ${self:custom.deleteFamilyName}
    handler: handlers/Delete.deleteFamily
    description: Lambda for deleting a family by its id
    events:
      - httpApi:
          path: /family/{id}
          method: DELETE
          authorizer: serviceAuthorizer
  deleteMember:
    name: ${self:custom.deleteMemberName}
    handler: handlers/Delete.deleteMember
    description: Lambda for deleting a member by its id
    events:
      - httpApi:
          path: /member/{id}
          method: DELETE
          authorizer: serviceAuthorizer
  deleteMemberFromFamily:
    name: ${self:custom.deleteMemberFromFamilyName}
    handler: handlers/Delete.deleteMemberFromFamily
    description: Lambda for deleting a member from a certain family
    events:
      - httpApi:
          path: /member/{id}/family/{familyId}
          method: DELETE
          authorizer: serviceAuthorizer
  updateFamily:
    name: ${self:custom.updateFamilyName}
    handler: handlers/Update.updateFamily
    description: Lambda for updating a family
    events:
      - httpApi:
          path: /family/{id}
          method: PUT
          authorizer: serviceAuthorizer
  updateMemberForFamily:
    name: ${self:custom.updateMemberInFamilyName}
    handler: handlers/Update.updateMemberForFamily
    description: Lambda for updating a member in a single family
    events:
      - httpApi:
          path: /member/{id}/family/{familyId}
          method: PUT
          authorizer: serviceAuthorizer
  updateMemberGlobally:
    name: ${self:custom.updateMemberGloballyName}
    handler: handlers/Update.updateMemberGlobally
    description: Lambda for updating a member record for member with id in all familys
    events:
      - httpApi:
          path: /member/{id}
          method: PUT
          authorizer: serviceAuthorizer

resources:
  Resources:
    FAMILYTABLE:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.familyTableNameMap.${self:provider.stage}}
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
          - AttributeName: FamilyOwner
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: FamilyOwner_IDX
            KeySchema:
              - AttributeName: FamilyOwner
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
    MEMBERTABLE:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.memberTableNameMap.${self:provider.stage}}
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
          - AttributeName: FamilyId
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
          - AttributeName: FamilyId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: FamilyId_IDX
            KeySchema:
              - AttributeName: FamilyId
                KeyType: HASH
              - AttributeName: Id
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
    # FAMILYPHOTOBUCKET:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:custom.FamilyPhotoBucketName}
    #     AccessControl: Private
    #     BucketEncryption:
    #       ServerSideEncryptionConfiguration:
    #         - ServerSideEncryptionByDefault:
    #             SSEAlgorithm: AES256
