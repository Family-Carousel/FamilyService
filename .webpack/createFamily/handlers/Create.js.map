{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./handlers/Create.ts","webpack:///external \"source-map-support/register\"","webpack:///./handlers/utilities.ts","webpack:///./services/familyService.ts","webpack:///./dataSources/family-repository.ts","webpack:///./dataSources/dynamo.utilities.ts","webpack:///external \"aws-sdk/clients/dynamodb\"","webpack:///external \"ajv\"","webpack:///external \"shortid\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","utils","familyData","serverReturn","createFamily","async","event","context","body","JSON","parse","familyService","buildResponse","stringify","err","console","error","require","statusCode","isBase64Encoded","headers","familyRepo","Ajv","shortid","familySchema","Id","generate","IsActive","ajv","validate","log","errorsText","Error","saveFamily","tableName","process","env","FAMILY_TABLE","DynamoUtils","PutItem","this","docClient","DocumentClient","hashName","hashValue","indexName","rangeName","rangeValue","paramsObject","TableName","KeyConditionExpression","ExpressionAttributeValues","IndexName","queryObj","ParamsObjectFactory","Promise","resolve","reject","query","promise","then","res","catch","item","params","Item","put"],"mappings":"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","file":"handlers/Create.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import 'source-map-support/register'\r\nimport { APIGatewayEvent, Context, ProxyResult } from 'aws-lambda';\r\n\r\nconst utils = require('../handlers/utilities');\r\nimport { familyService } from '../services/familyService';\r\nimport { IFamily } from '../interfaces/IFamily';\r\n\r\nlet familyData: IFamily;\r\nlet serverReturn: IFamily;\r\n\r\nexport const createFamily = async (\r\n    event: APIGatewayEvent,\r\n    context: Context\r\n): Promise<ProxyResult> => {\r\n    try {\r\n        if (!event.body) {\r\n            return utils.buildResponse(400, JSON.stringify('Object to create was not provided'));\r\n        }\r\n        familyData = JSON.parse(event.body);\r\n        serverReturn = await familyService.createFamily(familyData);\r\n\r\n        if (!serverReturn) {\r\n            return utils.buildResponse(404, JSON.stringify('Failed to create Family'));\r\n        }\r\n\r\n        return utils.buildResponse(201, JSON.stringify(serverReturn));\r\n    } catch(err) {\r\n        console.error('Family Service Create a family error: ', err);\r\n        return utils.buildResponse(500, JSON.stringify('Family Service internal server error'));\r\n    }\r\n}\r\n","module.exports = require(\"source-map-support/register\");","import { ProxyResult } from 'aws-lambda';\r\n\r\nmodule.exports = function () {\r\n\r\n    const buildResponse = (statusCode: number, body: string): ProxyResult => {\r\n        return {\r\n            isBase64Encoded: false,\r\n            statusCode: statusCode,\r\n            headers: { 'Access-Control-Allow-Origin': '*'},\r\n            body: body\r\n        }\r\n    }\r\n\r\n    return {\r\n        buildResponse: buildResponse,\r\n    }\r\n}();\r\n","'use script';\r\n\r\nimport { IFamily } from '../interfaces/IFamily';\r\n\r\nconst familyRepo = require('../dataSources/family-repository');\r\nconst Ajv = require('ajv');\r\n\r\nclass FamilyService {\r\n    \r\n    public async createFamily(familyData: IFamily) {\r\n        const shortid = require('shortid');\r\n        const familySchema = require('../schemas/familySchema');\r\n\r\n        if (!familyData) {\r\n            return;\r\n        }\r\n\r\n        familyData.Id = shortid.generate();\r\n        familyData.IsActive = 1;\r\n\r\n        try {\r\n            const ajv = new Ajv();\r\n            let valid = ajv.validate(familySchema, familyData);\r\n\r\n            if (!valid) {\r\n                console.log('Creating Family - Invalid Family Format: ', ajv.errorsText());\r\n                throw new Error(\"Creating Family - Invalid Family Format\");\r\n            }\r\n        } catch (err) {\r\n            console.error('Failed to perform validation on family data: ', err);\r\n            throw new Error('Failed to perform validation on family data');\r\n        }\r\n\r\n        try {\r\n            const response = await familyRepo.saveFamily(familyData);\r\n            return response;\r\n        } catch (err) {\r\n            console.error('Failed to save family to data table: ', err);\r\n            throw new Error('Failed to save family to data table');\r\n        }\r\n    }\r\n}\r\n\r\nexport const familyService = new FamilyService();\r\n\r\n// module.exports = {\r\n//     getFamilyByFamilyId: async (FamilyId) => {\r\n//         try {\r\n//             const family = await dynamo.getFamilyById(FamilyId);\r\n//             return family;\r\n//         } catch (err) {\r\n//             console.error(\"Error: \" + err);\r\n//             throw(\"Failed to get Family\");\r\n//         }\r\n//     },\r\n//     listFamilysByMemberId: async (memberId) => {\r\n//         try {\r\n//             const family = await dynamo.listFamilysByMemberId(memberId);\r\n//             return family;\r\n//         } catch (err) {\r\n//             console.error(\"Error: \" + err);\r\n//             throw(\"Failed to get Family by memberId\");\r\n//         }\r\n//     },\r\n//     updateFamily: async (familyData) => {\r\n//         const familySchema = require(\"../schemas/familySchema\");\r\n\r\n//         try {\r\n//             const ajv = new Ajv();\r\n//             let valid = ajv.validate(familySchema, familyData);\r\n\r\n//             if (!valid) {\r\n//                 console.error(\"Updating Family - Invalid Family Format: \" + ajv.errorsText());\r\n//                 throw(\"Updating Family - Invalid Family Format\");\r\n//             }\r\n//         } catch (err) {\r\n//             console.error(\"Error Validating Family Data: \" + err);\r\n//             throw(\"Error validating family data\");\r\n//         }\r\n\r\n//         try {\r\n//             const dynamoResponse = await dynamo.saveFamily(familyData);\r\n//             return dynamoResponse;\r\n//         } catch (err) {\r\n//             console.error(\"Updating family error: \" + err);\r\n//             throw(\"Failed to update family\");\r\n//         }\r\n//     },\r\n//     deleteFamily: async (familyId) => {\r\n//         try {\r\n//             const family = await dynamo.getFamilyById(familyId);\r\n//             family.IsActive = 0;\r\n\r\n//             const dynamoResponse = await dynamo.saveFamily(family);\r\n//             return dynamoResponse;\r\n//         } catch (err) {\r\n//             console.error(\"Family inactive error/Delete error: \" + err);\r\n//             throw(\"Error deleting family\");\r\n//         }\r\n//     }\r\n// };","'use strict';\r\nimport { DynamoUtils } from './dynamo.utilities';\r\nimport { IFamily } from '../interfaces/IFamily';\r\nconst tableName = process.env.FAMILY_TABLE;\r\n// const _ = require('lodash');\r\n\r\n// TODO: Convert for batch put of family's if ever needed\r\n// function buildPutRequestItemListOfTemplates(templateItemList, newTemplateName) {\r\n//     let updatedTemplates = _.map(templateItemList, (t) => {\r\n//       let newPutRequestObject = {\r\n//         LastUpdateBy: { S: t.LastUpdateBy.toString() },\r\n//         IsTrackingPixel: { N: t.IsTrackingPixel.toString() },\r\n//         IsActive: { N: t.IsActive.toString() },\r\n//         IsResendable: { N: t.IsResendable.toString() },\r\n//         CreatedDateTime: { S: t.CreatedDateTime },\r\n//         VersionId: { S: t.VersionId },\r\n//         LastUpdateDateTime: { S: t.LastUpdateDateTime },\r\n//         CreatedBy: { S: t.CreatedBy.toString() },\r\n//         Id: { S: t.Id },\r\n//         IsOnDoNotSendList: { N: t.IsOnDoNotSendList.toString() },\r\n//         ApplicationId: { S: t.ApplicationId },\r\n//         DefaultEmailAddresses: { M: { From: { S: t.DefaultEmailAddresses.From }, Bcc: { SS: t.DefaultEmailAddresses.Bcc }, Cc: { SS: t.DefaultEmailAddresses.Cc }, To: { SS: t.DefaultEmailAddresses.To } } }\r\n//       };\r\n\r\n//       if (t.Path) {\r\n//         newPutRequestObject.Path = { S: t.Path };\r\n//       }\r\n\r\n//       if (t.Stages && t.Stages.length) {\r\n//         newPutRequestObject.Stages = { SS: t.Stages };\r\n//       }\r\n\r\n//       if (t.Description) {\r\n//         newPutRequestObject.Description = { S: t.Description };\r\n//       }\r\n\r\n//       if (t.Subject) {\r\n//         newPutRequestObject.Subject = { S: t.Subject };\r\n//       }\r\n\r\n//       if (newTemplateName !== t.Name) {\r\n//         newPutRequestObject.Name = { S: newTemplateName };\r\n//       } else {\r\n//         newPutRequestObject.Name = { S: t.Name };\r\n//       }\r\n//       console.log('nameUpdateNewPutRequestObject', JSON.stringify(newPutRequestObject));\r\n\r\n//       return newPutRequestObject;\r\n//     });\r\n\r\n//     return updatedTemplates;\r\n//   }\r\n\r\nclass FamilyRepo {\r\n\r\n    public async saveFamily(familyData: IFamily) {\r\n        try {\r\n            const response = await DynamoUtils.PutItem(tableName!, familyData);\r\n            return response;\r\n        } catch (err) {\r\n            console.error('Error updating family via Dynamo: ', err);\r\n            throw new Error('Error updating family via Dynamo');\r\n        }\r\n    }\r\n}\r\n\r\nexport const familyRepo = new FamilyRepo();\r\n\r\n// module.exports = {\r\n//     getFamilyById: async (FamilyId) => {\r\n//         try {\r\n//             return await dynamoUtils.getByHashKey(tableName, { FamilyId: FamilyId });\r\n//         } catch(err) {\r\n//             console.error('Error getting family by id via Dynamo: ' + err);\r\n//             throw('Error getting family');\r\n//         }\r\n//     },\r\n//     listFamilysByMemberId: async (memberId) => {\r\n//         try {\r\n//             let qobj = dynamoUtils.paramsObjectFactory(tableName, \"MemberId_IDX\", \"MemberId\", memberId);\r\n//             return await dynamoUtils.query(qobj);\r\n//         } catch(err) {\r\n//             console.error('Error listing familys by memberId via Dynamo: ' + err);\r\n//             throw('Error listing familys by memberId');\r\n//         }\r\n//     }\r\n// };","import { DocumentClient } from 'aws-sdk/clients/dynamodb';\r\nimport { AWSError } from 'aws-sdk';\r\nimport { IFamily } from '../interfaces/IFamily';\r\n\r\ninterface IExpressionAttributeValues {\r\n  ':hashKeyValue': string;\r\n  ':rangeKeyValue'?: string;\r\n}\r\n\r\ninterface IParamsObject {\r\n  TableName: string;\r\n  KeyConditionExpression: string;\r\n  ExpressionAttributeValues: IExpressionAttributeValues;\r\n  IndexName?: string;\r\n}\r\n\r\nclass DynamoUtilities {\r\n\r\n  public docClient: DocumentClient;\r\n\r\n  constructor() {\r\n    // super();\r\n    this.docClient = new DocumentClient();\r\n  }\r\n\r\n  private ParamsObjectFactory(tableName: string, hashName: string, hashValue: string, indexName: string | null = null, \r\n    rangeName: string | null = null, rangeValue: string | null = null): DocumentClient.QueryInput {\r\n    let paramsObject: IParamsObject = {\r\n      TableName: tableName,\r\n      KeyConditionExpression: `${hashName} = :hashKeyValue`,\r\n      ExpressionAttributeValues: {\r\n        ':hashKeyValue': hashValue\r\n      }\r\n    };\r\n\r\n    if (rangeName && rangeValue) {\r\n      paramsObject.KeyConditionExpression += ` and ${rangeName} = :rangeKeyValue`;\r\n      paramsObject.ExpressionAttributeValues = {\r\n        ':hashKeyValue': hashValue,\r\n        ':rangeKeyValue': rangeValue\r\n      };\r\n    }\r\n\r\n    if (indexName) paramsObject.IndexName = indexName;\r\n\r\n    return paramsObject;\r\n  }\r\n\r\n  public Query(tableName: string, hashName: string, hashValue: string, indexName: string | null = null, \r\n    rangeName: string | null = null, rangeValue: string | null = null): Promise<DocumentClient.QueryOutput> {\r\n    const queryObj: DocumentClient.QueryInput = this.ParamsObjectFactory(tableName, hashName, hashValue, indexName, rangeName, rangeValue);\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      this.docClient\r\n        .query(queryObj)\r\n        .promise()\r\n        .then((res: DocumentClient.QueryOutput) => resolve(res))\r\n        .catch((err: AWSError) => reject('Error querying dynamo: ' + err));\r\n    });\r\n  }\r\n\r\n  public PutItem(tableName: string, item: IFamily) {\r\n    return new Promise(function(resolve, reject) {\r\n\r\n      var params: DocumentClient.PutItemInput = {\r\n        TableName: tableName,\r\n        Item: item\r\n      };\r\n\r\n      this.docClient\r\n        .put(params)\r\n        .promise()\r\n        .then(() => resolve(item))\r\n        .catch((err: AWSError) => reject('Error putting document to dynamo: ' + err));\r\n    });\r\n  }\r\n}\r\n\r\nexport const DynamoUtils = new DynamoUtilities();\r\n\r\n\r\n\r\n// const init = {\r\n//   dynamodb: () => {\r\n//     return new DynamoDB.DocumentClient(awsConfig);\r\n//   }\r\n// };\r\n\r\n// function paramsObjectFactory(tableName, hashName, hashValue, indexName = null, rangeName = null, rangeValue = null) {\r\n//   let paramsObject = {\r\n//     TableName: tableName,\r\n//     KeyConditionExpression: `${hashName} = :hashKeyValue`,\r\n//     ExpressionAttributeValues: {\r\n//       ':hashKeyValue': hashValue\r\n//     }\r\n//   };\r\n\r\n//   if (rangeName && rangeValue) {\r\n//     paramsObject.KeyConditionExpression += ` and ${rangeName} = :rangeKeyValue`;\r\n//     paramsObject.ExpressionAttributeValues = {\r\n//       ':hashKeyValue': hashValue,\r\n//       ':rangeKeyValue': rangeValue\r\n//     };\r\n//   }\r\n\r\n//   if (indexName) paramsObject.IndexName = indexName;\r\n\r\n//   return paramsObject;\r\n// }\r\n\r\n// module.exports = {\r\n//   putObject: async (tableName, item) => {\r\n    // return new Promise(function(resolve, reject) {\r\n    //   var docClient = init.dynamodb();\r\n\r\n    //   var params = {\r\n    //     TableName: tableName,\r\n    //     Item: item\r\n    //   };\r\n\r\n    //   docClient\r\n    //     .put(params)\r\n    //     .promise()\r\n    //     .then(() => {\r\n    //       return resolve(item);\r\n    //     })\r\n    //     .catch((err) => {\r\n    //       return reject('Error putting document to dynamo. ', err);\r\n    //     });\r\n    // });\r\n//   },\r\n\r\n//   batchPutObjects: async (tableName, itemList) => {\r\n//     return new Promise(function(resolve, reject) {\r\n//       let ddb = new DynamoDB(awsConfig);\r\n//       let putRequests = itemList.map((item) => {\r\n//         return {\r\n//           PutRequest: { Item: item }\r\n//         };\r\n//       });\r\n\r\n//       let params = {\r\n//         RequestItems: {\r\n//           [tableName]: putRequests\r\n//         }\r\n//       };\r\n\r\n//       ddb\r\n//         .batchWriteItem(params)\r\n//         .promise()\r\n//         .then(() => {\r\n//           return resolve();\r\n//         })\r\n//         .catch((err) => {\r\n//           return reject('Error putting list of documents(batch) to dynamo. ', err);\r\n//         });\r\n//     });\r\n//   },\r\n\r\n//   query: async (tableName, hashName, hashValue, indexName = null, rangeName = null, rangeValue = null) => {\r\n//     const queryObj = paramsObjectFactory(tableName, hashName, hashValue, indexName, rangeName, rangeValue);\r\n//     console.log('tableName', tableName);\r\n    // return new Promise(function(resolve, reject) {\r\n    //   var docClient = init.dynamodb();\r\n\r\n    //   docClient\r\n    //     .query(queryObj)\r\n    //     .promise()\r\n    //     .then((res) => {\r\n    //       return resolve(res.Items);\r\n    //     })\r\n    //     .catch((err) => {\r\n    //       return reject('Error querying dynamo. ' + err.message);\r\n    //     });\r\n    // });\r\n//   }\r\n// };","module.exports = require(\"aws-sdk/clients/dynamodb\");","module.exports = require(\"ajv\");","module.exports = require(\"shortid\");"],"sourceRoot":""}